//Time Complexity: O(MxN) where M, N is the length of word1 and word2 string, required to fill dp[m+1][n+1] matrix
//Space Complexity : O(MxN) where M, N is the length of word1 and word2 string, required to fill dp[m+1][n+1] matrix



class Solution {
    public int minDistance(String word1, String word2) {
        if (word1.equals(word2)) return 0;
        int m = word1.length();
        int n = word2.length();
        int[][] dp = new int[m+1][n+1];
        dp[0][0] = 0;
        for(int i=1;i<=m;i++){ //Filling 1st column
            dp[i][0] = i; 
        }
        for(int j=1;j<=n;j++){// Filling 1st row
            dp[0][j] = j;
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if (word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
                }else {
                dp[i][j] = 1 + Math.min(dp[i-1][j-1], Math.min(dp[i-1][j],dp[i][j-1]));}
            }
        }
        return dp[m][n];
    }
}
