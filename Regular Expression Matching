class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        a = len(p)
        b = [False] * (a + 1)
        c = True
        for j in range(2, a + 1, 2):
            if p[j - 1] != '*':
                break
            b[j] = True
        for i in range(len(s)):
            for j in range(1, a + 1):
                x = b[j]
                if p[j - 1] == '*':
                    b[j] = b[j - 2] or b[j - 1] or (
                        b[j] and (s[i] == p[j - 2] or p[j - 2] == '.'))
                else:
                    b[j] = c and (p[j - 1] == '.' or s[i] == p[j - 1])
                c = x
            c = False
        return b[a]
    
# Time Complexity: O(mn)
# Space Complexity: O(n)
# Successfully implemented on Leetcode
