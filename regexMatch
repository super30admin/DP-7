class Solution {
    
    //10. Regular Expression Matching
    //Time complexity : O(m*n) where m is the length of s and n is the length of p
    //Space complesity : O(m*n)
    public boolean isMatch(String s, String p) {
        
        
        
        //make a DP 2D array 
        //no. of rows will be the length of the string s + 1
        //no of cols will be length of string p + 1      
        
        int sLen = s.length();
        int pLen = p.length();
        
        int[][] dp = new int[sLen+1][pLen+1];
        
        //fill the first row and first column
        
        //dp[0][0] =1;
        dp[0][0] =1;
        
        //first row
        for(int j =1;j <= pLen; j++){
            if(p.charAt(j-1) =='*')
            dp[0][j] = dp[0][j-2];  //go 2 steps behind
            
    //or if it is a character or a '.', it is never going to match                             a empty string(since first row is a empty string)
            
        }
        
        //first column is always going to be 0
        
        for(int i =1;i <= sLen;i++){
            for(int j =1;j <= pLen; j++){
                
                if(p.charAt(j-1)=='*'){
                    
                    //case 0
                    //go 2 steps behind
                    dp[i][j] = dp[i][j-2];
                    //case 1 : if previous character of pattern matches current character of the string s
                    
                    if(s.charAt(i-1) == p.charAt(j-2) 
                       || p.charAt(j-2) =='.'){
                        //take value from above row
                        if(dp[i-1][j] == 1)
                        dp[i][j] = 1;
                    }
                    
                }
                
                else{       //if it is a character match or a '.'
                    if(s.charAt(i-1) ==p.charAt(j-1) 
                       || p.charAt(j-1)=='.'){
                        
                        //go to the diagonal element
                        dp[i][j] =dp[i-1][j-1];
                    }
                    
                }
            }
        }
        
        return (dp[sLen][pLen]>0);
        
        
    }
}