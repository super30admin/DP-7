//Timecomplexity:-O(nm).
//space complexity:- 0(nm).


class Solution {
    public boolean isMatch(String s, String p) {
        boolean[][] dp=new boolean[p.length()+1][s.length()+1];
         for (int i = 0; i < dp.length; i++) {

        for (int j = 0; j < dp[0].length; j++) {
            
            if(i==0 && j==0){
                dp[i][j]=true; // first element of dp matrix;
            }
            
            else if(j==0){
                
                if(p.charAt(i-1)=='*'){
                     dp[i][j]=dp[i-2][j];// first column
                }
                else{
                    dp[i][j]=false;
                }
            }
            
            else if(i==0){
                dp[i][j]=false;//first row
            }
            
            else{
                
                char pc=p.charAt(i-1);
                char sc=s.charAt(j-1);
                
                if(pc=='*'){// if any of the p character is * 
                    dp[i][j]=dp[i-2][j];
                
                char pslc= p.charAt(i-2);
                if(pslc=='.' || pslc==sc){//checking previous character and taking or of present vsalue and before value;
                    dp[i][j]= dp[i][j] || dp[i][j-1];
                }
           
            }
            
            else if(pc=='.'){
                dp[i][j]=dp[i-1][j-1];
            }
            else if(pc==sc){   //if characters are matching or having a . then takking diagnol element.
                dp[i][j]=dp[i-1][j-1];
            }
            else{
                dp[i][j]=false;
            }
        }
    }
}

  return dp[p.length()][s.length()];
}
}
