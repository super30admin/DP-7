class Solution {
    
    //72. Edit Distance
    //Time Complesity and Space complexity :O(mn) where m is the no. of rows and n is the no. of columns
    public int minDistance(String word1, String word2) {
        
        //word1 would be column and word2 --row
        int len1 = word1.length();
        int len2 = word2.length();
        
        int[][] dp  = new int[len2+1][len1+1];
        
       
        //fill the first row
        for(int j=0;j <= len1; j++ ){
            dp[0][j] = j;
        }
        
        //fill the first column
        for(int i =0;i <= len2; i++){
            dp[i][0] = i;
        }
        
        for(int i =1;i <= len2;i++){
            for(int j =1;j<= len1; j++){
                //if both characters are equal, don't do any operation and just take the diagonal value
                
                if(word1.charAt(j-1) == word2.charAt(i-1))
                    dp[i][j] = dp[i-1][j-1];
                
                else{
                    dp[i][j] = 1+Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]));
                }
            }
        }
        return dp[len2][len1];
    }
}